#!/usr/bin/env node

/**
 * Module dependencies.
 */
const {Settings, DateTime} = require('luxon');

const app = require('../src/app');
const debug = require('debug')('franchise-hockey:server');
const http = require('http');
const { parsed: { PORT }} = require('dotenv').config();

Settings.defaultZone = 'utc';

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function() {
  console.info(`defaultZone zoneName ${DateTime.local().zoneName}`);
  console.log(`Listening on port ${port}`);
  // Here we send the ready signal to PM2
  if (process && process.send) process.send('ready');
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  Settings.defaultZone = 'system';
  console.info(`defaultZone zoneName ${DateTime.local().zoneName}`);

  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
